{
  "stats": {
    "suites": 4,
    "tests": 31,
    "passes": 27,
    "pending": 0,
    "failures": 3,
    "start": "2022-09-28T00:55:50.764Z",
    "end": "2022-09-28T00:56:34.243Z",
    "duration": 15280,
    "testsRegistered": 31,
    "passPercent": 87.09677419354838,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 1,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "d0c03095-d32a-446e-9567-5ee176317f3f",
      "title": "",
      "fullFile": "cypress/integration/2.login.spec.js",
      "file": "cypress/integration/2.login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ee36ff18-a404-4cbd-adb2-8955c1421474",
          "title": "Casos de teste sobre a rota /login da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve realizar o login corretamente",
              "fullTitle": "Casos de teste sobre a rota /login da API Serverest Deve realizar o login corretamente",
              "timedOut": null,
              "duration": 453,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuarioParaLogin();\ncy.get('@usuarioLogin').then(usuario => {\n  _serverest.default.logar(usuario).then(res => {\n    cy.contractValidation(res, 'post-login', 200);\n    _validaServerest.default.validaLoginComSucesso(res);\n    _serverest.default.salvarBearer(res);\n  });\n});",
              "err": {},
              "uuid": "ea654256-fff8-4338-b89d-9328108d0a86",
              "parentUUID": "ee36ff18-a404-4cbd-adb2-8955c1421474",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve realizar a tentativa de login com senha errada sem sucesso",
              "fullTitle": "Casos de teste sobre a rota /login da API Serverest Deve realizar a tentativa de login com senha errada sem sucesso",
              "timedOut": null,
              "duration": 964,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuarioComSenhaErrada();\ncy.get('@usuarioComSenhaErrada').then(usuario => {\n  _serverest.default.logar(usuario).then(res => {\n    cy.contractValidation(res, 'post-login', 400);\n    _validaServerest.default.validaLoginSemSucesso(res);\n  });\n});",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Function.validaLoginSemSucesso (https://serverest.dev/__cypress/tests?p=cypress\\integration\\2.login.spec.js:617:32)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\2.login.spec.js:197:34)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "41cc5e6b-1345-453f-b642-11cb7cc456da",
              "parentUUID": "ee36ff18-a404-4cbd-adb2-8955c1421474",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ea654256-fff8-4338-b89d-9328108d0a86"
          ],
          "failures": [
            "41cc5e6b-1345-453f-b642-11cb7cc456da"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1417,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "adeea68d-b7ce-416e-b467-3e07ca4ff0a2",
      "title": "",
      "fullFile": "cypress/integration/3.produtos.spec.js",
      "file": "cypress/integration/3.produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "32085829-e616-4c33-8873-8c3c4817517c",
          "title": "Casos de teste sobre a rota /produtos da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve buscar todos os produtos cadastrados",
              "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Deve buscar todos os produtos cadastrados",
              "timedOut": null,
              "duration": 1966,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarProdutos().then(res => {\n  cy.contractValidation(res, 'get-produtos', 200);\n  _validaServerest.default.validarBuscaDeProdutos(res);\n});",
              "err": {
                "message": "Error: Erros encontrados na validação de contrato, por favor verifique: \n must have required property 'usuarios', but received object",
                "estack": "Error: Erros encontrados na validação de contrato, por favor verifique: \n must have required property 'usuarios', but received object\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\support\\index.js:140:13)",
                "diff": null
              },
              "uuid": "7336fb25-b54b-4753-a8a7-2f02aba54c74",
              "parentUUID": "32085829-e616-4c33-8873-8c3c4817517c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve postar produto sem estar logado",
              "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Não deve postar produto sem estar logado",
              "timedOut": null,
              "duration": 250,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = _facture.default.gerarProduto();\n_serverest.default.cadastrarProdutoSemLogar(produto).then(res => {\n  cy.contractValidation(res, 'post-produtos', 401);\n  _validaServerest.default.validarCadastroDeProdutoSemLogar(res);\n});",
              "err": {},
              "uuid": "70eae1c4-6a49-4743-8a47-21e4f14588c6",
              "parentUUID": "32085829-e616-4c33-8873-8c3c4817517c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "f2583506-a811-4a61-8662-c77be2fcab0a",
              "title": "Logar com sucesso usando um usuário administrador",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve postar um novo produto com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso usando um usuário administrador Deve postar um novo produto com sucesso",
                  "timedOut": null,
                  "duration": 462,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _facture.default.gerarProduto();\n_serverest.default.cadastrarProduto(produto).then(res => {\n  cy.contractValidation(res, 'post-produtos', 201);\n  _validaServerest.default.validarCadastroDeProdutoComSucesso(res);\n});",
                  "err": {},
                  "uuid": "0627aa06-241d-469d-b2e3-44d2073140fb",
                  "parentUUID": "f2583506-a811-4a61-8662-c77be2fcab0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve postar um produto já cadastrado",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso usando um usuário administrador Não deve postar um produto já cadastrado",
                  "timedOut": null,
                  "duration": 612,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutoExistente();\ncy.get('@produtoExistente').then(produto => {\n  _serverest.default.cadastrarProduto(produto).then(res => {\n    cy.contractValidation(res, 'post-produtos', 400);\n    _validaServerest.default.validarCadastroDeProdutoSemSucesso(res);\n  });\n});",
                  "err": {},
                  "uuid": "3a18dbe1-1906-438e-88f7-6b14304b0f3c",
                  "parentUUID": "f2583506-a811-4a61-8662-c77be2fcab0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar a busca do produto cadastrado pelo Id",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso usando um usuário administrador Deve realizar a busca do produto cadastrado pelo Id",
                  "timedOut": null,
                  "duration": 429,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutoCadastradoPorId().then(res => {\n  cy.contractValidation(res, 'get-produtos-by-id', 200);\n  _validaServerest.default.validarBuscaDeProdutoCadastradoPorId(res);\n});",
                  "err": {},
                  "uuid": "9b029278-d4a3-47bb-835c-42e80a4fd983",
                  "parentUUID": "f2583506-a811-4a61-8662-c77be2fcab0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar a busca de um produto por um Id não existente",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso usando um usuário administrador Deve realizar a busca de um produto por um Id não existente",
                  "timedOut": null,
                  "duration": 432,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutoCadastradoPorIdSemSucesso().then(res => {\n  cy.contractValidation(res, 'get-produtos-by-id', 400);\n  _validaServerest.default.validarBuscaDeProdutoCadastradoPorIdSemSucesso(res);\n});",
                  "err": {},
                  "uuid": "c490566c-3076-4af5-8ca5-93341fd36ea3",
                  "parentUUID": "f2583506-a811-4a61-8662-c77be2fcab0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar os dados do produto cadastrado com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso usando um usuário administrador Deve editar os dados do produto cadastrado com sucesso",
                  "timedOut": null,
                  "duration": 414,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _facture.default.gerarProduto();\n_serverest.default.editarProdutoCadastrado(produto).then(res => {\n  cy.contractValidation(res, 'put-produtos-by-id', 200);\n  _validaServerest.default.validarEdicaoDeProdutoCadastradoComSucesso(res);\n});",
                  "err": {},
                  "uuid": "74701110-1b50-4acb-a61d-5933e3c8b8e5",
                  "parentUUID": "f2583506-a811-4a61-8662-c77be2fcab0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve editar um produto com as mesmas informações de produto já cadastrado",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso usando um usuário administrador Não deve editar um produto com as mesmas informações de produto já cadastrado",
                  "timedOut": null,
                  "duration": 602,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutoExistente();\ncy.get('@produtoExistente').then(produto => {\n  _serverest.default.editarProdutoCadastrado(produto).then(res => {\n    cy.contractValidation(res, 'put-produtos-by-id', 400);\n    _validaServerest.default.validarEdicaoDeProdutoSemSucesso(res);\n  });\n});",
                  "err": {},
                  "uuid": "79aca4b6-78c8-40b0-967c-60dddcb5fcf5",
                  "parentUUID": "f2583506-a811-4a61-8662-c77be2fcab0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve excluir o produto cadastrado com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso usando um usuário administrador Deve excluir o produto cadastrado com sucesso",
                  "timedOut": null,
                  "duration": 424,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.deletarProdutoCadastrado().then(res => {\n  cy.contractValidation(res, 'delete-produtos-by-id', 200);\n  _validaServerest.default.validarExclusaoDeProduto(res);\n});",
                  "err": {},
                  "uuid": "ee8967d6-30c3-462f-ad47-ec413185c10b",
                  "parentUUID": "f2583506-a811-4a61-8662-c77be2fcab0a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0627aa06-241d-469d-b2e3-44d2073140fb",
                "3a18dbe1-1906-438e-88f7-6b14304b0f3c",
                "9b029278-d4a3-47bb-835c-42e80a4fd983",
                "c490566c-3076-4af5-8ca5-93341fd36ea3",
                "74701110-1b50-4acb-a61d-5933e3c8b8e5",
                "79aca4b6-78c8-40b0-967c-60dddcb5fcf5",
                "ee8967d6-30c3-462f-ad47-ec413185c10b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3375,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1ebbdecd-a446-463b-860f-74d9e50f8314",
              "title": "Logar com sucesso usando um usuário não administrador",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Não deve postar um novo produto com usuário não administrador",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso usando um usuário não administrador Não deve postar um novo produto com usuário não administrador",
                  "timedOut": null,
                  "duration": 425,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _facture.default.gerarProduto();\n_serverest.default.cadastrarProduto(produto).then(res => {\n  cy.contractValidation(res, 'post-produtos', 403);\n  _validaServerest.default.validarCadastroDeProdutoUsuarioNaoAdm(res);\n});",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading '0')\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Logar com sucesso usando um...`",
                    "estack": "TypeError: Cannot read properties of undefined (reading '0')\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Logar com sucesso usando um...`\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\3.produtos.spec.js:350:29)",
                    "diff": null
                  },
                  "uuid": "2404ac04-993a-4961-867c-7e657770c11b",
                  "parentUUID": "1ebbdecd-a446-463b-860f-74d9e50f8314",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve editar produto usando usuário não administrador",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso usando um usuário não administrador Não deve editar produto usando usuário não administrador",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _facture.default.gerarProduto();\n_serverest.default.editarProdutoCadastrado(produto).then(res => {\n  cy.contractValidation(res, 'put-produtos-by-id', 403);\n  _validaServerest.default.validarEdicaoDeProdutoUsuarioNaoAdm(res);\n});",
                  "err": {},
                  "uuid": "c4190c26-651f-4606-9c23-5b68164366de",
                  "parentUUID": "1ebbdecd-a446-463b-860f-74d9e50f8314",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "2404ac04-993a-4961-867c-7e657770c11b"
              ],
              "pending": [],
              "skipped": [
                "c4190c26-651f-4606-9c23-5b68164366de"
              ],
              "duration": 425,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "70eae1c4-6a49-4743-8a47-21e4f14588c6"
          ],
          "failures": [
            "7336fb25-b54b-4753-a8a7-2f02aba54c74"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2216,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d2aee156-e20a-4ac0-89b2-99f0a3ab0792",
      "title": "",
      "fullFile": "cypress/integration/4.carrinhos.spec.js",
      "file": "cypress/integration/4.carrinhos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4c16e08c-5f4c-480f-9715-7b4ffaa5bcbb",
          "title": "Casos de teste sobre a rota /carrinhos da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve buscar todos os carrinhos cadastrados",
              "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Deve buscar todos os carrinhos cadastrados",
              "timedOut": null,
              "duration": 456,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarCarrinhos().then(res => {\n  cy.contractValidation(res, 'get-carrinhos', 200);\n  _validaServerest.default.validarBuscaDeCarrinhos(res);\n});",
              "err": {},
              "uuid": "1d91b590-de03-4a2a-8f2e-a49ad070331a",
              "parentUUID": "4c16e08c-5f4c-480f-9715-7b4ffaa5bcbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve cadastrar carrinho sem possuir um token de autenticação",
              "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Não deve cadastrar carrinho sem possuir um token de autenticação",
              "timedOut": null,
              "duration": 527,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarProdutoParaCarrinho();\ncy.get('@produtoParaCarrinho').then(produto => {\n  _serverest.default.postarCarrinhoSemAutenticacao(produto).then(res => {\n    cy.contractValidation(res, 'post-carrinhos', 401);\n    _validaServerest.default.validarCadastroDeCarrinhoSemAutenticacao(res);\n  });\n});",
              "err": {},
              "uuid": "b669c9d5-7f5f-4469-a33f-2646e133fb71",
              "parentUUID": "4c16e08c-5f4c-480f-9715-7b4ffaa5bcbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve realizar a finalização da compra sem realizar o login",
              "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Não deve realizar a finalização da compra sem realizar o login",
              "timedOut": null,
              "duration": 202,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.concluirCompraSemLogin().then(res => {\n  cy.contractValidation(res, 'delete-carrinhos-concluir-compra', 200);\n  _validaServerest.default.validarFinalizaçãoDeCompraSemLogin(res);\n});",
              "err": {},
              "uuid": "e6d133f1-30ff-4932-98bb-123babbde5fb",
              "parentUUID": "4c16e08c-5f4c-480f-9715-7b4ffaa5bcbb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "0c59b655-8399-4fc5-92bf-e49793b6f819",
              "title": "Realizar o login com sucesso",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve cadastrar um carrinho com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Realizar o login com sucesso Deve cadastrar um carrinho com sucesso",
                  "timedOut": null,
                  "duration": 653,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutoParaCarrinho(); //Aqui eu faço a busca de um produto aleatório dentro da lista de produtos\n\ncy.get('@produtoParaCarrinho').then(produto => {\n  //O produto retornado na linha acima é chamado aqui no cy.get('@produtoParaCarrinho') e enviado para a próxima função para a adição do carrinho\n  _serverest.default.adicionarCarrinhoComSucesso(produto).then(res => {\n    cy.contractValidation(res, 'post-carrinhos', 201);\n    _validaServerest.default.validarCadastroDeCarrinho(res);\n  });\n});",
                  "err": {},
                  "uuid": "f58c405c-5d3b-43c2-88f8-a02bac60d611",
                  "parentUUID": "0c59b655-8399-4fc5-92bf-e49793b6f819",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar um carrinho pelo seu Id",
                  "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Realizar o login com sucesso Deve buscar um carrinho pelo seu Id",
                  "timedOut": null,
                  "duration": 394,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarCarrinhoCadastradoPorId().then(res => {\n  cy.contractValidation(res, 'get-carrinhos-by-id', 200);\n  _validaServerest.default.validarBuscaDeCarrinhoPorId(res);\n});",
                  "err": {},
                  "uuid": "b36b554b-5738-4c2a-9e40-6e24d009cc9f",
                  "parentUUID": "0c59b655-8399-4fc5-92bf-e49793b6f819",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar a busca de um carrinho por um Id não existente",
                  "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Realizar o login com sucesso Deve realizar a busca de um carrinho por um Id não existente",
                  "timedOut": null,
                  "duration": 407,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarCarrinhoCadastradoPorIdSemSucesso().then(res => {\n  cy.contractValidation(res, 'get-carrinhos-by-id', 400);\n  _validaServerest.default.validarBuscaDeCarrinhoCadastradoPorIdSemSucesso(res);\n});",
                  "err": {},
                  "uuid": "cb296d60-dad5-4cf7-af71-da2e43f83465",
                  "parentUUID": "0c59b655-8399-4fc5-92bf-e49793b6f819",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar a exclusão do carrinho através da finalização da compra com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Realizar o login com sucesso Deve realizar a exclusão do carrinho através da finalização da compra com sucesso",
                  "timedOut": null,
                  "duration": 398,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.concluirCompraComSucesso().then(res => {\n  cy.contractValidation(res, 'delete-carrinhos-concluir-compra', 200);\n  _validaServerest.default.validarFinalizaçãoDeCompraComSucesso(res);\n});",
                  "err": {},
                  "uuid": "9bb3d43b-5bdf-4391-b605-cd3058a898f8",
                  "parentUUID": "0c59b655-8399-4fc5-92bf-e49793b6f819",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve cadastrar um carrinho com produto duplicado",
                  "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Realizar o login com sucesso Não deve cadastrar um carrinho com produto duplicado",
                  "timedOut": null,
                  "duration": 595,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutoParaCarrinho(); //Aqui eu faço a busca de um produto aleatório dentro da lista de produtos\n\ncy.get('@produtoParaCarrinho').then(produto => {\n  //O produto retornado na linha acima é chamado aqui no cy.get('@produtoParaCarrinho') e enviado para a próxima função para a adição do carrinho com produto duplicado\n  _serverest.default.adicionarCarrinhoComProdutoDuplicado(produto).then(res => {\n    cy.contractValidation(res, 'post-carrinhos', 400);\n    _validaServerest.default.validarCadastroDeCarrinhoComProdutoDuplicado(res);\n  });\n});",
                  "err": {},
                  "uuid": "50d12fb2-4b07-41c8-bc59-011f6fcd9908",
                  "parentUUID": "0c59b655-8399-4fc5-92bf-e49793b6f819",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f58c405c-5d3b-43c2-88f8-a02bac60d611",
                "b36b554b-5738-4c2a-9e40-6e24d009cc9f",
                "cb296d60-dad5-4cf7-af71-da2e43f83465",
                "9bb3d43b-5bdf-4391-b605-cd3058a898f8",
                "50d12fb2-4b07-41c8-bc59-011f6fcd9908"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2447,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cbd2d88d-ee9b-4f35-8869-2521af6beb54",
              "title": "Realizar o login com sucesso usando um usuário com carrinho já cadastrado",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Não deve cadastrar um carrinho para usuário com carrinho já cadastrado",
                  "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Realizar o login com sucesso usando um usuário com carrinho já cadastrado Não deve cadastrar um carrinho para usuário com carrinho já cadastrado",
                  "timedOut": null,
                  "duration": 945,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutoParaCarrinho(); //Aqui eu faço a busca de um produto aleatório dentro da lista de produtos\n\ncy.get('@produtoParaCarrinho').then(produto => {\n  //O produto retornado na linha acima é chamado aqui no cy.get('@produtoParaCarrinho') e enviado para a próxima função para a adição do carrinho\n  _serverest.default.adicionarCarrinhoComSucesso(produto).then(res => {\n    cy.contractValidation(res, 'post-carrinhos', 400);\n    _validaServerest.default.validarCadastroDeCarrinhoParaUsuarioComCarrinho(res);\n  });\n});",
                  "err": {},
                  "uuid": "15f01684-3a15-4120-9411-b96b69bb1577",
                  "parentUUID": "cbd2d88d-ee9b-4f35-8869-2521af6beb54",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "15f01684-3a15-4120-9411-b96b69bb1577"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 945,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "1d91b590-de03-4a2a-8f2e-a49ad070331a",
            "b669c9d5-7f5f-4469-a33f-2646e133fb71",
            "e6d133f1-30ff-4932-98bb-123babbde5fb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1185,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "58d47cc8-f358-49a4-a1ef-7519d9d5d4d2",
      "title": "",
      "fullFile": "cypress/integration/1.usuarios.spec.js",
      "file": "cypress/integration/1.usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fbe8712a-d02c-4d72-a486-26322a5df918",
          "title": "Casos de teste sobre a rota /usuarios da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve buscar todos os usuários cadastrados",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve buscar todos os usuários cadastrados",
              "timedOut": null,
              "duration": 1010,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuarios().then(res => {\n  cy.contractValidation(res, 'get-usuarios', 200);\n  _validaServerest.default.validarBuscaDeUsuarios(res);\n});",
              "err": {},
              "uuid": "c4db8bdd-ed52-4475-9e3d-4ca943c055bb",
              "parentUUID": "fbe8712a-d02c-4d72-a486-26322a5df918",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um novo usuário administrador",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve cadastrar um novo usuário administrador",
              "timedOut": null,
              "duration": 236,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.cadastrarNovoUsuarioAleatorio().then(res => {\n  cy.contractValidation(res, 'post-usuarios', 201);\n  _validaServerest.default.validarCadastroDeUsuarioComSucesso(res);\n});",
              "err": {},
              "uuid": "70461973-f522-45e4-be35-b18f44008ddf",
              "parentUUID": "fbe8712a-d02c-4d72-a486-26322a5df918",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve realizar o cadastro de um usuário com e-mail já cadastrado",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Não deve realizar o cadastro de um usuário com e-mail já cadastrado",
              "timedOut": null,
              "duration": 528,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuarioExistente();\ncy.get('@usuarioExistente').then(usuario => {\n  _serverest.default.cadastrarNovoUsuario(usuario).then(res => {\n    cy.contractValidation(res, 'post-usuarios', 400);\n    _validaServerest.default.validarCadastroDeUsuarioSemSucesso(res);\n  });\n});",
              "err": {},
              "uuid": "59e60c3a-bfe5-4496-a1c1-d7f1f75400f0",
              "parentUUID": "fbe8712a-d02c-4d72-a486-26322a5df918",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve buscar o usuário cadastrado pelo seu Id com sucesso",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve buscar o usuário cadastrado pelo seu Id com sucesso",
              "timedOut": null,
              "duration": 219,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuarioPorId().then(res => {\n  cy.contractValidation(res, 'get-usuario-by-id', 200);\n  _validaServerest.default.validarBuscaDeUsuarioPorId(res);\n});",
              "err": {},
              "uuid": "ef39071e-3e54-4c2e-9726-d02b3d9b8ef6",
              "parentUUID": "fbe8712a-d02c-4d72-a486-26322a5df918",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve buscar o usuário cadastrado pelo seu Id sem sucesso",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve buscar o usuário cadastrado pelo seu Id sem sucesso",
              "timedOut": null,
              "duration": 214,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuarioPorIdSemSucesso().then(res => {\n  cy.contractValidation(res, 'get-usuario-by-id', 400);\n  _validaServerest.default.validarBuscaDeUsuarioPorIdSemSucesso(res);\n});",
              "err": {},
              "uuid": "f3fd8a1c-6ff2-4c03-ae40-2e7591c7c05f",
              "parentUUID": "fbe8712a-d02c-4d72-a486-26322a5df918",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar os dados do usuário cadastrado",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve editar os dados do usuário cadastrado",
              "timedOut": null,
              "duration": 211,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.editarUsuarioCadastrado().then(res => {\n  cy.contractValidation(res, 'put-usuarios-by-id', 200);\n  _validaServerest.default.validarEdicaoDeUsuario(res);\n});",
              "err": {},
              "uuid": "16999080-f48c-4253-8469-c7525aa3f7fc",
              "parentUUID": "fbe8712a-d02c-4d72-a486-26322a5df918",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve excluir o usuário cadastrado",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve excluir o usuário cadastrado",
              "timedOut": null,
              "duration": 215,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.excluirUsuarioCadastrado().then(res => {\n  cy.contractValidation(res, 'delete-usuarios-by-id', 200);\n  _validaServerest.default.validarExclusaoDeUsuario(res);\n});",
              "err": {},
              "uuid": "6414812e-ca4c-40af-86c3-4c75b3f81299",
              "parentUUID": "fbe8712a-d02c-4d72-a486-26322a5df918",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "e0338bfa-e1cf-445f-b76a-f2be51530faa",
              "title": "Filtrar e separar os usuários conforme sua categoria",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve buscar e salvar os usuários administradores em um arquivo json",
                  "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Filtrar e separar os usuários conforme sua categoria Deve buscar e salvar os usuários administradores em um arquivo json",
                  "timedOut": null,
                  "duration": 312,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarUsuariosAdministradores();\ncy.get('@listaDeAdms').then(res => {\n  cy.log(JSON.stringify(res));\n  cy.writeFile('./cypress/fixtures/usuarios-adms.json', res);\n  _validaServerest.default.validarAdm(res);\n});",
                  "err": {},
                  "uuid": "e6c5e8a4-e47a-419a-b34a-baad50e27c3d",
                  "parentUUID": "e0338bfa-e1cf-445f-b76a-f2be51530faa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar e salvar os usuários não administradores em um arquivo json",
                  "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Filtrar e separar os usuários conforme sua categoria Deve buscar e salvar os usuários não administradores em um arquivo json",
                  "timedOut": null,
                  "duration": 325,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarUsuariosNaoAdministradores();\ncy.get('@listaDeNaoAdms').then(res => {\n  cy.log(JSON.stringify(res));\n  cy.writeFile('./cypress/fixtures/usuarios-nao-adms.json', res);\n  _validaServerest.default.validarAdm(res);\n});",
                  "err": {},
                  "uuid": "2fbc8c06-c5ed-4fa2-ae97-00d898853b93",
                  "parentUUID": "e0338bfa-e1cf-445f-b76a-f2be51530faa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e6c5e8a4-e47a-419a-b34a-baad50e27c3d",
                "2fbc8c06-c5ed-4fa2-ae97-00d898853b93"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 637,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "c4db8bdd-ed52-4475-9e3d-4ca943c055bb",
            "70461973-f522-45e4-be35-b18f44008ddf",
            "59e60c3a-bfe5-4496-a1c1-d7f1f75400f0",
            "ef39071e-3e54-4c2e-9726-d02b3d9b8ef6",
            "f3fd8a1c-6ff2-4c03-ae40-2e7591c7c05f",
            "16999080-f48c-4253-8469-c7525aa3f7fc",
            "6414812e-ca4c-40af-86c3-4c75b3f81299"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2633,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}