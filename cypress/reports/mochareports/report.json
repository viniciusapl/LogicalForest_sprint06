{
  "stats": {
    "suites": 4,
    "tests": 26,
    "passes": 24,
    "pending": 0,
    "failures": 2,
    "start": "2022-09-21T21:09:52.181Z",
    "end": "2022-09-21T21:10:25.491Z",
    "duration": 12620,
    "testsRegistered": 26,
    "passPercent": 92.3076923076923,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b2dc2a5d-6ff6-4cd5-bebf-51cd84795eed",
      "title": "",
      "fullFile": "cypress/integration/2.login.spec.js",
      "file": "cypress/integration/2.login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1c4798ef-8eb4-4ce6-9568-063d56c9559d",
          "title": "Casos de teste sobre a rota /login da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve realizar o login corretamente",
              "fullTitle": "Casos de teste sobre a rota /login da API Serverest Deve realizar o login corretamente",
              "timedOut": null,
              "duration": 496,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuarioParaLogin();\ncy.get('@usuarioLogin').then(usuario => {\n  _serverest.default.logar(usuario).then(res => {\n    cy.contractValidation(res, 'post-login', 200);\n    _validaServerest.default.validaLoginComSucesso(res);\n    _serverest.default.salvarBearer(res);\n  });\n});",
              "err": {},
              "uuid": "688ce4bb-fd37-47e5-bd96-086bc7ecc181",
              "parentUUID": "1c4798ef-8eb4-4ce6-9568-063d56c9559d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve realizar a tentativa de login com senha errada sem sucesso",
              "fullTitle": "Casos de teste sobre a rota /login da API Serverest Deve realizar a tentativa de login com senha errada sem sucesso",
              "timedOut": null,
              "duration": 788,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuarioComSenhaErrada();\ncy.get('@usuarioComSenhaErrada').then(usuario => {\n  _serverest.default.logar(usuario).then(res => {\n    cy.contractValidation(res, 'post-login', 400);\n    _validaServerest.default.validaLoginSemSucesso(res);\n  });\n});",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Function.validaLoginSemSucesso (https://serverest.dev/__cypress/tests?p=cypress\\integration\\2.login.spec.js:566:32)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\2.login.spec.js:197:34)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "3d3171f8-8c96-4169-8816-cc5ec761c4e6",
              "parentUUID": "1c4798ef-8eb4-4ce6-9568-063d56c9559d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve realizar tentativa de login sem sucesso",
              "fullTitle": "Casos de teste sobre a rota /login da API Serverest Deve realizar tentativa de login sem sucesso",
              "timedOut": null,
              "duration": 449,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let usuario = {\n  email: 'naoexiste@test.com',\n  password: '123'\n};\n_serverest.default.logar(usuario).then(res => {\n  cy.contractValidation(res, 'post-login', 400);\n  _validaServerest.default.validaLoginSemSucesso(res);\n});",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Function.validaLoginSemSucesso (https://serverest.dev/__cypress/tests?p=cypress\\integration\\2.login.spec.js:566:32)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\2.login.spec.js:210:32)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "30f4446e-5fc2-4c02-a1ef-123a88a42b5b",
              "parentUUID": "1c4798ef-8eb4-4ce6-9568-063d56c9559d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "688ce4bb-fd37-47e5-bd96-086bc7ecc181"
          ],
          "failures": [
            "3d3171f8-8c96-4169-8816-cc5ec761c4e6",
            "30f4446e-5fc2-4c02-a1ef-123a88a42b5b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1733,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "2ec78cb5-be1a-48d1-85a1-37229f8ecb5c",
      "title": "",
      "fullFile": "cypress/integration/3.produtos.spec.js",
      "file": "cypress/integration/3.produtos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d14f40ea-d88f-467b-a114-ef77300e0b61",
          "title": "Casos de teste sobre a rota /produtos da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve buscar todos os produtos cadastrados",
              "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Deve buscar todos os produtos cadastrados",
              "timedOut": null,
              "duration": 419,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarProdutos().then(res => {\n  cy.contractValidation(res, 'get-produtos', 200);\n  _validaServerest.default.validarBuscaDeProdutos(res);\n});",
              "err": {},
              "uuid": "bd023abb-b0f7-4273-a080-e9fa3d90fefd",
              "parentUUID": "d14f40ea-d88f-467b-a114-ef77300e0b61",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "1ee88557-b836-47c0-b37f-e33e049dc03a",
              "title": "Logar com sucesso",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve postar um novo produto com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso Deve postar um novo produto com sucesso",
                  "timedOut": null,
                  "duration": 667,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let produto = _facture.default.gerarProduto();\n_serverest.default.cadastrarProdutoComSucesso(produto).then(res => {\n  cy.contractValidation(res, 'post-produtos', 201);\n  _validaServerest.default.validarCadastroDeProdutoComSucesso(res);\n});",
                  "err": {},
                  "uuid": "70a5a096-eb41-494b-a12b-e1a0b267ed2d",
                  "parentUUID": "1ee88557-b836-47c0-b37f-e33e049dc03a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Não deve postar um produto já cadastrado",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso Não deve postar um produto já cadastrado",
                  "timedOut": null,
                  "duration": 859,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutoExistente();\ncy.get('@produtoExistente').then(produto => {\n  _serverest.default.cadastrarProdutoComSucesso(produto).then(res => {\n    cy.contractValidation(res, 'post-produtos', 400);\n    _validaServerest.default.validarCadastroDeProdutoSemSucesso(res);\n  });\n});",
                  "err": {},
                  "uuid": "67608f73-07a8-483f-9284-7f147f2e5851",
                  "parentUUID": "1ee88557-b836-47c0-b37f-e33e049dc03a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar a busca do produto cadastrado pelo Id",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso Deve realizar a busca do produto cadastrado pelo Id",
                  "timedOut": null,
                  "duration": 610,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutoCadastradoPorId().then(res => {\n  cy.contractValidation(res, 'get-produtos-by-id', 200);\n  _validaServerest.default.validarBuscaDeProdutoCadastradoPorId(res);\n});",
                  "err": {},
                  "uuid": "6d9733be-4a4d-49c4-a80d-9d502def3226",
                  "parentUUID": "1ee88557-b836-47c0-b37f-e33e049dc03a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar a busca de um produto por um Id não existente",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso Deve realizar a busca de um produto por um Id não existente",
                  "timedOut": null,
                  "duration": 609,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutoCadastradoPorIdSemSucesso().then(res => {\n  cy.contractValidation(res, 'get-produtos-by-id', 400);\n  _validaServerest.default.validarBuscaDeProdutoCadastradoPorIdSemSucesso(res);\n});",
                  "err": {},
                  "uuid": "4afa6c76-1687-433c-81f2-71a18824e04e",
                  "parentUUID": "1ee88557-b836-47c0-b37f-e33e049dc03a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve editar os dados do produto cadastrado com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso Deve editar os dados do produto cadastrado com sucesso",
                  "timedOut": null,
                  "duration": 687,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.editarProdutoCadastrado().then(res => {\n  cy.contractValidation(res, 'put-produtos-by-id', 200);\n  _validaServerest.default.validarEdicaoDeProdutoCadastradoComSucesso(res);\n});",
                  "err": {},
                  "uuid": "92c35457-1e55-4e4d-9be1-297eb13bdd41",
                  "parentUUID": "1ee88557-b836-47c0-b37f-e33e049dc03a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve excluir o produto cadastrado com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /produtos da API Serverest Logar com sucesso Deve excluir o produto cadastrado com sucesso",
                  "timedOut": null,
                  "duration": 643,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.deletarProdutoCadastrado().then(res => {\n  cy.contractValidation(res, 'delete-produtos-by-id', 200);\n  _validaServerest.default.validarExclusaoDeProduto(res);\n});",
                  "err": {},
                  "uuid": "d7543540-34d6-48b2-a051-00e5febf2035",
                  "parentUUID": "1ee88557-b836-47c0-b37f-e33e049dc03a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70a5a096-eb41-494b-a12b-e1a0b267ed2d",
                "67608f73-07a8-483f-9284-7f147f2e5851",
                "6d9733be-4a4d-49c4-a80d-9d502def3226",
                "4afa6c76-1687-433c-81f2-71a18824e04e",
                "92c35457-1e55-4e4d-9be1-297eb13bdd41",
                "d7543540-34d6-48b2-a051-00e5febf2035"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4075,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "bd023abb-b0f7-4273-a080-e9fa3d90fefd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 419,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d8eae5dc-8d60-4dfe-a9bf-1f263366e6ac",
      "title": "",
      "fullFile": "cypress/integration/4.carrinhos.spec.js",
      "file": "cypress/integration/4.carrinhos.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c05719e1-efae-4dd8-832c-3bc206f9db71",
          "title": "Casos de teste sobre a rota /carrinhos da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve buscar todos os carrinhos cadastrados",
              "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Deve buscar todos os carrinhos cadastrados",
              "timedOut": null,
              "duration": 305,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarCarrinhos().then(res => {\n  cy.contractValidation(res, 'get-carrinhos', 200);\n  _validaServerest.default.validarBuscaDeCarrinhos(res);\n});",
              "err": {},
              "uuid": "0f34af6e-dc55-476f-876d-007df9720a55",
              "parentUUID": "c05719e1-efae-4dd8-832c-3bc206f9db71",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "a6fadb46-22c9-49e5-afd0-841fad11b6a8",
              "title": "Realizar o login com sucesso",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve cadastrar um carrinho com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Realizar o login com sucesso Deve cadastrar um carrinho com sucesso",
                  "timedOut": null,
                  "duration": 843,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutoParaCarrinho(); //Aqui eu faço a busca de um produto aleatório dentro da lista de produtos\n\ncy.get('@produtoParaCarrinho').then(produto => {\n  //O produto retornado na linha acima é chamado aqui no cy.get('@produtoParaCarrinho') e enviado para a próxima função para a adição do carrinho\n  _serverest.default.adicionarCarrinhoComSucesso(produto).then(res => {\n    cy.contractValidation(res, 'post-carrinhos', 201);\n    _validaServerest.default.validarCadastroDeCarrinho(res);\n  });\n});",
                  "err": {},
                  "uuid": "7f8fc7d4-45f1-4b2f-be65-6670181673ca",
                  "parentUUID": "a6fadb46-22c9-49e5-afd0-841fad11b6a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar um carrinho pelo seu Id",
                  "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Realizar o login com sucesso Deve buscar um carrinho pelo seu Id",
                  "timedOut": null,
                  "duration": 609,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarCarrinhoCadastradoPorId().then(res => {\n  cy.contractValidation(res, 'get-carrinhos-by-id', 200);\n  _validaServerest.default.validarBuscaDeCarrinhoPorId(res);\n});",
                  "err": {},
                  "uuid": "df21032a-57e4-414f-b38f-f9a7be55cac8",
                  "parentUUID": "a6fadb46-22c9-49e5-afd0-841fad11b6a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar a busca de um carrinho por um Id não existente",
                  "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Realizar o login com sucesso Deve realizar a busca de um carrinho por um Id não existente",
                  "timedOut": null,
                  "duration": 669,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarCarrinhoCadastradoPorIdSemSucesso().then(res => {\n  cy.contractValidation(res, 'get-carrinhos-by-id', 400);\n  _validaServerest.default.validarBuscaDeCarrinhoCadastradoPorIdSemSucesso(res);\n});",
                  "err": {},
                  "uuid": "bd9b1df8-cf27-4e31-be50-4238396a305d",
                  "parentUUID": "a6fadb46-22c9-49e5-afd0-841fad11b6a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve realizar a exclusão do carrinho através da finalização da compra com sucesso",
                  "fullTitle": "Casos de teste sobre a rota /carrinhos da API Serverest Realizar o login com sucesso Deve realizar a exclusão do carrinho através da finalização da compra com sucesso",
                  "timedOut": null,
                  "duration": 673,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.concluirCompraComSucesso().then(res => {\n  cy.contractValidation(res, 'delete-carrinhos-concluir-compra', 200);\n  _validaServerest.default.validarFinalizaçãoDeCompraComSucesso(res);\n});",
                  "err": {},
                  "uuid": "a4142e83-3ca2-4897-ba79-60bd3ba234ef",
                  "parentUUID": "a6fadb46-22c9-49e5-afd0-841fad11b6a8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7f8fc7d4-45f1-4b2f-be65-6670181673ca",
                "df21032a-57e4-414f-b38f-f9a7be55cac8",
                "bd9b1df8-cf27-4e31-be50-4238396a305d",
                "a4142e83-3ca2-4897-ba79-60bd3ba234ef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2794,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "0f34af6e-dc55-476f-876d-007df9720a55"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 305,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a5cab744-8258-469e-80db-5e83ed728df7",
      "title": "",
      "fullFile": "cypress/integration/1.usuarios.spec.js",
      "file": "cypress/integration/1.usuarios.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8e590497-e750-4d79-a13b-14cb21a7ef47",
          "title": "Casos de teste sobre a rota /usuarios da API Serverest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve buscar todos os usuários cadastrados",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve buscar todos os usuários cadastrados",
              "timedOut": null,
              "duration": 680,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuarios().then(res => {\n  cy.contractValidation(res, 'get-usuarios', 200);\n  _validaServerest.default.validarBuscaDeUsuarios(res);\n});",
              "err": {},
              "uuid": "d625c17c-4b54-48f0-9fb2-8cb3a1372600",
              "parentUUID": "8e590497-e750-4d79-a13b-14cb21a7ef47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um novo usuário administrador",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve cadastrar um novo usuário administrador",
              "timedOut": null,
              "duration": 226,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.cadastrarNovoUsuarioAleatorio().then(res => {\n  cy.contractValidation(res, 'post-usuarios', 201);\n  _validaServerest.default.validarCadastroDeUsuarioComSucesso(res);\n});",
              "err": {},
              "uuid": "b829b641-af09-4302-9498-0f95fcc7b075",
              "parentUUID": "8e590497-e750-4d79-a13b-14cb21a7ef47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve realizar o cadastro de um usuário com e-mail já cadastrado",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Não deve realizar o cadastro de um usuário com e-mail já cadastrado",
              "timedOut": null,
              "duration": 457,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuarioExistente();\ncy.get('@usuarioExistente').then(usuario => {\n  _serverest.default.cadastrarNovoUsuario(usuario).then(res => {\n    cy.contractValidation(res, 'post-usuarios', 400);\n    _validaServerest.default.validarCadastroDeUsuarioSemSucesso(res);\n  });\n});",
              "err": {},
              "uuid": "8fd4fbe5-5b3a-4b6c-b523-09a966e90042",
              "parentUUID": "8e590497-e750-4d79-a13b-14cb21a7ef47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve buscar o usuário cadastrado pelo seu Id com sucesso",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve buscar o usuário cadastrado pelo seu Id com sucesso",
              "timedOut": null,
              "duration": 261,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuarioPorId().then(res => {\n  cy.contractValidation(res, 'get-usuario-by-id', 200);\n  _validaServerest.default.validarBuscaDeUsuarioPorId(res);\n});",
              "err": {},
              "uuid": "2d38a39d-2ac3-40d3-b4d2-a59800f67486",
              "parentUUID": "8e590497-e750-4d79-a13b-14cb21a7ef47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve buscar o usuário cadastrado pelo seu Id sem sucesso",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve buscar o usuário cadastrado pelo seu Id sem sucesso",
              "timedOut": null,
              "duration": 213,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuarioPorIdSemSucesso().then(res => {\n  cy.contractValidation(res, 'get-usuario-by-id', 400);\n  _validaServerest.default.validarBuscaDeUsuarioPorIdSemSucesso(res);\n});",
              "err": {},
              "uuid": "ea81719a-6cad-4209-8a37-e24a226c79f5",
              "parentUUID": "8e590497-e750-4d79-a13b-14cb21a7ef47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar os dados do usuário cadastrado",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve editar os dados do usuário cadastrado",
              "timedOut": null,
              "duration": 219,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.editarUsuarioCadastrado().then(res => {\n  cy.contractValidation(res, 'put-usuarios-by-id', 200);\n  _validaServerest.default.validarEdicaoDeUsuario(res);\n});",
              "err": {},
              "uuid": "9c959627-01a2-4d4a-a413-3e3742ee5148",
              "parentUUID": "8e590497-e750-4d79-a13b-14cb21a7ef47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve excluir o usuário cadastrado",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve excluir o usuário cadastrado",
              "timedOut": null,
              "duration": 198,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.excluirUsuarioCadastrado().then(res => {\n  cy.contractValidation(res, 'delete-usuarios-by-id', 200);\n  _validaServerest.default.validarExclusaoDeUsuario(res);\n});",
              "err": {},
              "uuid": "b163a272-6f17-4914-a732-128f65d92ea8",
              "parentUUID": "8e590497-e750-4d79-a13b-14cb21a7ef47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Não deve postar um novo usuário administrador já cadastrado",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Não deve postar um novo usuário administrador já cadastrado",
              "timedOut": null,
              "duration": 208,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.postarUsuarioSemSucesso().then(res => {\n  cy.contractValidation(res, 'post-usuarios', 400);\n  _validaServerest.default.validarCadastroDeUsuarioSemSucesso(res);\n});",
              "err": {},
              "uuid": "0534d330-17db-46d5-8f64-054d1bf9e0ec",
              "parentUUID": "8e590497-e750-4d79-a13b-14cb21a7ef47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve buscar e salvar um usuário no arquivo json",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve buscar e salvar um usuário no arquivo json",
              "timedOut": null,
              "duration": 300,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuarios().then(res => {\n  cy.log(JSON.stringify(res.body.usuarios[0]));\n  cy.writeFile('./cypress/fixtures/users.json', res.body.usuarios[0]);\n  _validaServerest.default.validarBuscaDeUsuarios(res);\n});",
              "err": {},
              "uuid": "1a036210-aa81-4059-901f-c1344f49b89e",
              "parentUUID": "8e590497-e750-4d79-a13b-14cb21a7ef47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve buscar e salvar os usuários administradores em um arquivo json",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve buscar e salvar os usuários administradores em um arquivo json",
              "timedOut": null,
              "duration": 276,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuariosAdministradores();\ncy.get('@listaDeAdms').then(res => {\n  cy.log(JSON.stringify(res));\n  cy.writeFile('./cypress/fixtures/usuarios-adms.json', res);\n  _validaServerest.default.validarAdm(res);\n});",
              "err": {},
              "uuid": "1ad43d0a-003b-420f-8421-bc3c9eceb4e8",
              "parentUUID": "8e590497-e750-4d79-a13b-14cb21a7ef47",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve buscar e salvar os usuários não administradores em um arquivo json",
              "fullTitle": "Casos de teste sobre a rota /usuarios da API Serverest Deve buscar e salvar os usuários não administradores em um arquivo json",
              "timedOut": null,
              "duration": 256,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.buscarUsuariosNaoAdministradores();\ncy.get('@listaDeNaoAdms').then(res => {\n  cy.log(JSON.stringify(res));\n  cy.writeFile('./cypress/fixtures/usuarios-nao-adms.json', res);\n  _validaServerest.default.validarAdm(res);\n});",
              "err": {},
              "uuid": "fc354fc8-beab-4e94-8bc7-c3d45480a022",
              "parentUUID": "8e590497-e750-4d79-a13b-14cb21a7ef47",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d625c17c-4b54-48f0-9fb2-8cb3a1372600",
            "b829b641-af09-4302-9498-0f95fcc7b075",
            "8fd4fbe5-5b3a-4b6c-b523-09a966e90042",
            "2d38a39d-2ac3-40d3-b4d2-a59800f67486",
            "ea81719a-6cad-4209-8a37-e24a226c79f5",
            "9c959627-01a2-4d4a-a413-3e3742ee5148",
            "b163a272-6f17-4914-a732-128f65d92ea8",
            "0534d330-17db-46d5-8f64-054d1bf9e0ec",
            "1a036210-aa81-4059-901f-c1344f49b89e",
            "1ad43d0a-003b-420f-8421-bc3c9eceb4e8",
            "fc354fc8-beab-4e94-8bc7-c3d45480a022"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3294,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}